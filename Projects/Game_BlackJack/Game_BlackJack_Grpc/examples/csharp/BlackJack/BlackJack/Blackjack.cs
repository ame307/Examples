// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blackjack.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BJ {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Blackjack {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Blackjack() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9ibGFja2phY2sucHJvdG8SAkJKIgcKBUVtcHR5IoEBCgpHYW1lUmVzdWx0", 
            "EhMKC3BsYXllckNhcmRzGAEgASgJEhMKC2RlYWxlckNhcmRzGAIgASgJEhQK", 
            "DHBsYXllckFtb3VudBgDIAEoCRIUCgxkZWFsZXJBbW91bnQYBCABKAkSDQoF", 
            "bW9uZXkYBSABKAkSDgoGcmVzdWx0GAYgASgJIiUKB1JlcXVlc3QSCgoCaWQY", 
            "ASABKAkSDgoGYW1vdW50GAIgASgFIiQKBFVzZXISDAoEbmFtZRgBIAEoCRIO", 
            "CgZwYXNzd2QYAiABKAkiKQoKVXNlclJlY29yZBIMCgRuYW1lGAEgASgJEg0K", 
            "BW1vbmV5GAIgASgFIhgKClNlc3Npb25fSWQSCgoCaWQYASABKAkiGgoHUmVj", 
            "ZWlwdBIPCgdzdWNjZXNzGAEgASgJMvgCCgJCShIjCgVMb2dpbhIILkJKLlVz", 
            "ZXIaDi5CSi5TZXNzaW9uX0lkIgASJwoGTG9nb3V0Eg4uQkouU2Vzc2lvbl9J", 
            "ZBoLLkJKLlJlY2VpcHQiABInCgxSZWdpc3RyYXRpb24SCC5CSi5Vc2VyGgsu", 
            "QkouUmVjZWlwdCIAEiUKBERlYWwSCy5CSi5SZXF1ZXN0Gg4uQkouR2FtZVJl", 
            "c3VsdCIAEicKA0hpdBIOLkJKLlNlc3Npb25fSWQaDi5CSi5HYW1lUmVzdWx0", 
            "IgASKQoFU3RhbmQSDi5CSi5TZXNzaW9uX0lkGg4uQkouR2FtZVJlc3VsdCIA", 
            "EioKBkRvdWJsZRIOLkJKLlNlc3Npb25fSWQaDi5CSi5HYW1lUmVzdWx0IgAS", 
            "LQoJU3VycmVuZGVyEg4uQkouU2Vzc2lvbl9JZBoOLkJKLkdhbWVSZXN1bHQi", 
            "ABIlCgRMaXN0EgkuQkouRW1wdHkaDi5CSi5Vc2VyUmVjb3JkIgAwAUIYChBp", 
            "by5ncnBjLmV4YW1wbGVzogIDSExXYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::BJ.Empty), null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BJ.GameResult), new[]{ "PlayerCards", "DealerCards", "PlayerAmount", "DealerAmount", "Money", "Result" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BJ.Request), new[]{ "Id", "Amount" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BJ.User), new[]{ "Name", "Passwd" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BJ.UserRecord), new[]{ "Name", "Money" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BJ.Session_Id), new[]{ "Id" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::BJ.Receipt), new[]{ "Success" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Empty(Empty other) : this() {
    }

    public Empty Clone() {
      return new Empty(this);
    }

    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameResult : pb::IMessage<GameResult> {
    private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => new GameResult());
    public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GameResult(GameResult other) : this() {
      playerCards_ = other.playerCards_;
      dealerCards_ = other.dealerCards_;
      playerAmount_ = other.playerAmount_;
      dealerAmount_ = other.dealerAmount_;
      money_ = other.money_;
      result_ = other.result_;
    }

    public GameResult Clone() {
      return new GameResult(this);
    }

    public const int PlayerCardsFieldNumber = 1;
    private string playerCards_ = "";
    public string PlayerCards {
      get { return playerCards_; }
      set {
        playerCards_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DealerCardsFieldNumber = 2;
    private string dealerCards_ = "";
    public string DealerCards {
      get { return dealerCards_; }
      set {
        dealerCards_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PlayerAmountFieldNumber = 3;
    private string playerAmount_ = "";
    public string PlayerAmount {
      get { return playerAmount_; }
      set {
        playerAmount_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DealerAmountFieldNumber = 4;
    private string dealerAmount_ = "";
    public string DealerAmount {
      get { return dealerAmount_; }
      set {
        dealerAmount_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int MoneyFieldNumber = 5;
    private string money_ = "";
    public string Money {
      get { return money_; }
      set {
        money_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ResultFieldNumber = 6;
    private string result_ = "";
    public string Result {
      get { return result_; }
      set {
        result_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GameResult);
    }

    public bool Equals(GameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerCards != other.PlayerCards) return false;
      if (DealerCards != other.DealerCards) return false;
      if (PlayerAmount != other.PlayerAmount) return false;
      if (DealerAmount != other.DealerAmount) return false;
      if (Money != other.Money) return false;
      if (Result != other.Result) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PlayerCards.Length != 0) hash ^= PlayerCards.GetHashCode();
      if (DealerCards.Length != 0) hash ^= DealerCards.GetHashCode();
      if (PlayerAmount.Length != 0) hash ^= PlayerAmount.GetHashCode();
      if (DealerAmount.Length != 0) hash ^= DealerAmount.GetHashCode();
      if (Money.Length != 0) hash ^= Money.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerCards.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerCards);
      }
      if (DealerCards.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DealerCards);
      }
      if (PlayerAmount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerAmount);
      }
      if (DealerAmount.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DealerAmount);
      }
      if (Money.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Money);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Result);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerCards.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerCards);
      }
      if (DealerCards.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DealerCards);
      }
      if (PlayerAmount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerAmount);
      }
      if (DealerAmount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DealerAmount);
      }
      if (Money.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Money);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      return size;
    }

    public void MergeFrom(GameResult other) {
      if (other == null) {
        return;
      }
      if (other.PlayerCards.Length != 0) {
        PlayerCards = other.PlayerCards;
      }
      if (other.DealerCards.Length != 0) {
        DealerCards = other.DealerCards;
      }
      if (other.PlayerAmount.Length != 0) {
        PlayerAmount = other.PlayerAmount;
      }
      if (other.DealerAmount.Length != 0) {
        DealerAmount = other.DealerAmount;
      }
      if (other.Money.Length != 0) {
        Money = other.Money;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerCards = input.ReadString();
            break;
          }
          case 18: {
            DealerCards = input.ReadString();
            break;
          }
          case 26: {
            PlayerAmount = input.ReadString();
            break;
          }
          case 34: {
            DealerAmount = input.ReadString();
            break;
          }
          case 42: {
            Money = input.ReadString();
            break;
          }
          case 50: {
            Result = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Request(Request other) : this() {
      id_ = other.id_;
      amount_ = other.amount_;
    }

    public Request Clone() {
      return new Request(this);
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AmountFieldNumber = 2;
    private int amount_;
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    public User(User other) : this() {
      name_ = other.name_;
      passwd_ = other.passwd_;
    }

    public User Clone() {
      return new User(this);
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PasswdFieldNumber = 2;
    private string passwd_ = "";
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as User);
    }

    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Passwd != other.Passwd) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passwd);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      return size;
    }

    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Passwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserRecord : pb::IMessage<UserRecord> {
    private static readonly pb::MessageParser<UserRecord> _parser = new pb::MessageParser<UserRecord>(() => new UserRecord());
    public static pb::MessageParser<UserRecord> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UserRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UserRecord(UserRecord other) : this() {
      name_ = other.name_;
      money_ = other.money_;
    }

    public UserRecord Clone() {
      return new UserRecord(this);
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int MoneyFieldNumber = 2;
    private int money_;
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UserRecord);
    }

    public bool Equals(UserRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Money != other.Money) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Money != 0) hash ^= Money.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Money != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Money);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      return size;
    }

    public void MergeFrom(UserRecord other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Money != 0) {
        Money = other.Money;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Money = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Session_Id : pb::IMessage<Session_Id> {
    private static readonly pb::MessageParser<Session_Id> _parser = new pb::MessageParser<Session_Id>(() => new Session_Id());
    public static pb::MessageParser<Session_Id> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Session_Id() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Session_Id(Session_Id other) : this() {
      id_ = other.id_;
    }

    public Session_Id Clone() {
      return new Session_Id(this);
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Session_Id);
    }

    public bool Equals(Session_Id other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    public void MergeFrom(Session_Id other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Receipt : pb::IMessage<Receipt> {
    private static readonly pb::MessageParser<Receipt> _parser = new pb::MessageParser<Receipt>(() => new Receipt());
    public static pb::MessageParser<Receipt> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::BJ.Blackjack.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Receipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Receipt(Receipt other) : this() {
      success_ = other.success_;
    }

    public Receipt Clone() {
      return new Receipt(this);
    }

    public const int SuccessFieldNumber = 1;
    private string success_ = "";
    public string Success {
      get { return success_; }
      set {
        success_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Receipt);
    }

    public bool Equals(Receipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Success.Length != 0) hash ^= Success.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      return size;
    }

    public void MergeFrom(Receipt other) {
      if (other == null) {
        return;
      }
      if (other.Success.Length != 0) {
        Success = other.Success;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
