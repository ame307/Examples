// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blackjack.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace BJ {
  public static class BJ
  {
    static readonly string __ServiceName = "BJ.BJ";

    static readonly Marshaller<global::BJ.User> __Marshaller_User = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.User.Parser.ParseFrom);
    static readonly Marshaller<global::BJ.Session_Id> __Marshaller_Session_Id = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.Session_Id.Parser.ParseFrom);
    static readonly Marshaller<global::BJ.Receipt> __Marshaller_Receipt = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.Receipt.Parser.ParseFrom);
    static readonly Marshaller<global::BJ.Request> __Marshaller_Request = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.Request.Parser.ParseFrom);
    static readonly Marshaller<global::BJ.GameResult> __Marshaller_GameResult = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.GameResult.Parser.ParseFrom);
    static readonly Marshaller<global::BJ.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::BJ.UserRecord> __Marshaller_UserRecord = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BJ.UserRecord.Parser.ParseFrom);

    static readonly Method<global::BJ.User, global::BJ.Session_Id> __Method_Login = new Method<global::BJ.User, global::BJ.Session_Id>(
        MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_User,
        __Marshaller_Session_Id);

    static readonly Method<global::BJ.Session_Id, global::BJ.Receipt> __Method_Logout = new Method<global::BJ.Session_Id, global::BJ.Receipt>(
        MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_Session_Id,
        __Marshaller_Receipt);

    static readonly Method<global::BJ.User, global::BJ.Receipt> __Method_Registration = new Method<global::BJ.User, global::BJ.Receipt>(
        MethodType.Unary,
        __ServiceName,
        "Registration",
        __Marshaller_User,
        __Marshaller_Receipt);

    static readonly Method<global::BJ.Request, global::BJ.GameResult> __Method_Deal = new Method<global::BJ.Request, global::BJ.GameResult>(
        MethodType.Unary,
        __ServiceName,
        "Deal",
        __Marshaller_Request,
        __Marshaller_GameResult);

    static readonly Method<global::BJ.Session_Id, global::BJ.GameResult> __Method_Hit = new Method<global::BJ.Session_Id, global::BJ.GameResult>(
        MethodType.Unary,
        __ServiceName,
        "Hit",
        __Marshaller_Session_Id,
        __Marshaller_GameResult);

    static readonly Method<global::BJ.Session_Id, global::BJ.GameResult> __Method_Stand = new Method<global::BJ.Session_Id, global::BJ.GameResult>(
        MethodType.Unary,
        __ServiceName,
        "Stand",
        __Marshaller_Session_Id,
        __Marshaller_GameResult);

    static readonly Method<global::BJ.Session_Id, global::BJ.GameResult> __Method_Double = new Method<global::BJ.Session_Id, global::BJ.GameResult>(
        MethodType.Unary,
        __ServiceName,
        "Double",
        __Marshaller_Session_Id,
        __Marshaller_GameResult);

    static readonly Method<global::BJ.Session_Id, global::BJ.GameResult> __Method_Surrender = new Method<global::BJ.Session_Id, global::BJ.GameResult>(
        MethodType.Unary,
        __ServiceName,
        "Surrender",
        __Marshaller_Session_Id,
        __Marshaller_GameResult);

    static readonly Method<global::BJ.Empty, global::BJ.UserRecord> __Method_List = new Method<global::BJ.Empty, global::BJ.UserRecord>(
        MethodType.ServerStreaming,
        __ServiceName,
        "List",
        __Marshaller_Empty,
        __Marshaller_UserRecord);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BJ.Blackjack.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBJClient
    {
      global::BJ.Session_Id Login(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.Session_Id Login(global::BJ.User request, CallOptions options);
      AsyncUnaryCall<global::BJ.Session_Id> LoginAsync(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.Session_Id> LoginAsync(global::BJ.User request, CallOptions options);
      global::BJ.Receipt Logout(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.Receipt Logout(global::BJ.Session_Id request, CallOptions options);
      AsyncUnaryCall<global::BJ.Receipt> LogoutAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.Receipt> LogoutAsync(global::BJ.Session_Id request, CallOptions options);
      global::BJ.Receipt Registration(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.Receipt Registration(global::BJ.User request, CallOptions options);
      AsyncUnaryCall<global::BJ.Receipt> RegistrationAsync(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.Receipt> RegistrationAsync(global::BJ.User request, CallOptions options);
      global::BJ.GameResult Deal(global::BJ.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.GameResult Deal(global::BJ.Request request, CallOptions options);
      AsyncUnaryCall<global::BJ.GameResult> DealAsync(global::BJ.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.GameResult> DealAsync(global::BJ.Request request, CallOptions options);
      global::BJ.GameResult Hit(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.GameResult Hit(global::BJ.Session_Id request, CallOptions options);
      AsyncUnaryCall<global::BJ.GameResult> HitAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.GameResult> HitAsync(global::BJ.Session_Id request, CallOptions options);
      global::BJ.GameResult Stand(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.GameResult Stand(global::BJ.Session_Id request, CallOptions options);
      AsyncUnaryCall<global::BJ.GameResult> StandAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.GameResult> StandAsync(global::BJ.Session_Id request, CallOptions options);
      global::BJ.GameResult Double(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.GameResult Double(global::BJ.Session_Id request, CallOptions options);
      AsyncUnaryCall<global::BJ.GameResult> DoubleAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.GameResult> DoubleAsync(global::BJ.Session_Id request, CallOptions options);
      global::BJ.GameResult Surrender(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::BJ.GameResult Surrender(global::BJ.Session_Id request, CallOptions options);
      AsyncUnaryCall<global::BJ.GameResult> SurrenderAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::BJ.GameResult> SurrenderAsync(global::BJ.Session_Id request, CallOptions options);
      AsyncServerStreamingCall<global::BJ.UserRecord> List(global::BJ.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::BJ.UserRecord> List(global::BJ.Empty request, CallOptions options);
    }

    // server-side interface
    public interface IBJ
    {
      Task<global::BJ.Session_Id> Login(global::BJ.User request, ServerCallContext context);
      Task<global::BJ.Receipt> Logout(global::BJ.Session_Id request, ServerCallContext context);
      Task<global::BJ.Receipt> Registration(global::BJ.User request, ServerCallContext context);
      Task<global::BJ.GameResult> Deal(global::BJ.Request request, ServerCallContext context);
      Task<global::BJ.GameResult> Hit(global::BJ.Session_Id request, ServerCallContext context);
      Task<global::BJ.GameResult> Stand(global::BJ.Session_Id request, ServerCallContext context);
      Task<global::BJ.GameResult> Double(global::BJ.Session_Id request, ServerCallContext context);
      Task<global::BJ.GameResult> Surrender(global::BJ.Session_Id request, ServerCallContext context);
      Task List(global::BJ.Empty request, IServerStreamWriter<global::BJ.UserRecord> responseStream, ServerCallContext context);
    }

    // client stub
    public class BJClient : ClientBase, IBJClient
    {
      public BJClient(Channel channel) : base(channel)
      {
      }
      public global::BJ.Session_Id Login(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Login, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.Session_Id Login(global::BJ.User request, CallOptions options)
      {
        var call = CreateCall(__Method_Login, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.Session_Id> LoginAsync(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Login, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.Session_Id> LoginAsync(global::BJ.User request, CallOptions options)
      {
        var call = CreateCall(__Method_Login, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.Receipt Logout(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Logout, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.Receipt Logout(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Logout, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.Receipt> LogoutAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Logout, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.Receipt> LogoutAsync(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Logout, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.Receipt Registration(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Registration, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.Receipt Registration(global::BJ.User request, CallOptions options)
      {
        var call = CreateCall(__Method_Registration, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.Receipt> RegistrationAsync(global::BJ.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Registration, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.Receipt> RegistrationAsync(global::BJ.User request, CallOptions options)
      {
        var call = CreateCall(__Method_Registration, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.GameResult Deal(global::BJ.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Deal, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.GameResult Deal(global::BJ.Request request, CallOptions options)
      {
        var call = CreateCall(__Method_Deal, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> DealAsync(global::BJ.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Deal, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> DealAsync(global::BJ.Request request, CallOptions options)
      {
        var call = CreateCall(__Method_Deal, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.GameResult Hit(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Hit, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.GameResult Hit(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Hit, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> HitAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Hit, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> HitAsync(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Hit, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.GameResult Stand(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Stand, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.GameResult Stand(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Stand, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> StandAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Stand, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> StandAsync(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Stand, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.GameResult Double(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Double, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.GameResult Double(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Double, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> DoubleAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Double, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> DoubleAsync(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Double, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::BJ.GameResult Surrender(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Surrender, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::BJ.GameResult Surrender(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Surrender, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> SurrenderAsync(global::BJ.Session_Id request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Surrender, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::BJ.GameResult> SurrenderAsync(global::BJ.Session_Id request, CallOptions options)
      {
        var call = CreateCall(__Method_Surrender, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncServerStreamingCall<global::BJ.UserRecord> List(global::BJ.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_List, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::BJ.UserRecord> List(global::BJ.Empty request, CallOptions options)
      {
        var call = CreateCall(__Method_List, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBJ serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_Registration, serviceImpl.Registration)
          .AddMethod(__Method_Deal, serviceImpl.Deal)
          .AddMethod(__Method_Hit, serviceImpl.Hit)
          .AddMethod(__Method_Stand, serviceImpl.Stand)
          .AddMethod(__Method_Double, serviceImpl.Double)
          .AddMethod(__Method_Surrender, serviceImpl.Surrender)
          .AddMethod(__Method_List, serviceImpl.List).Build();
    }

    // creates a new client
    public static BJClient NewClient(Channel channel)
    {
      return new BJClient(channel);
    }

  }
}
#endregion
